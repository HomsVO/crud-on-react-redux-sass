{"version":3,"sources":["serviceWorker.js","сomponents/Nav.jsx","redux/actions/book.js","сomponents/BookItem.jsx","сomponents/BookList.jsx","pages/BooksPage.jsx","pages/BookAddPage.jsx","сomponents/Loader.jsx","pages/BookChangePage.jsx","hooks/routes.hook.js","App.jsx","redux/reducers/book.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","className","id","activeClassName","exact","to","setBooks","books","type","payload","setBooksLoading","loading","BookItem","book","dispatch","useDispatch","author","title","hidden","_id","checked","completed","onChange","e","data","axios","post","then","res","catch","err","console","log","htmlFor","onClick","BookList","useSelector","state","map","item","index","key","length","BooksPage","BookAddPage","props","useForm","register","handleSubmit","errors","watch","onSubmit","addBookRequest","history","push","forhtml","name","ref","required","Loader","BookChangePage","params","find","updBook","changeBookRequest","defaultValue","useRoutes","path","component","App","routes","loadings","useEffect","a","get","Nav","inititalState","combineReducers","action","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b8b1ae6d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark  bg-dark \">\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item\">\r\n              <NavLink className=\"nav-link\" activeClassName=\"active\" exact to=\"/\">Books</NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavLink className=\"nav-link\" activeClassName=\"active\" exact to=\"/add\">Add</NavLink>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import axios from 'axios';\r\n\r\nexport const setBooks = (books) => {\r\n    return {\r\n        type: \"SET_BOOKS\",\r\n        payload:books\r\n    }\r\n}\r\nexport const setBooksLoading = (loading) => {\r\n    return {\r\n        type: \"SET_BOOKS_LOADING\",\r\n        payload:loading\r\n    }\r\n}\r\n\r\nexport const addBookRequest = data => dispatch => {\r\n    axios.post('/api/book/add', data)\r\n        .then(res => dispatch(setBooks(res.data)))\r\n        .catch(err => console.log(err))\r\n}\r\nexport const changeBookRequest = data => dispatch => {\r\n    axios.post('/api/book/u', data)\r\n        .then(res => dispatch(setBooks(res.data)))\r\n        .catch(err => console.log(err))\r\n}\r\nexport const deleteBookRequest = _id => dispatch => {\r\n    axios.post('/api/book/d', {_id})\r\n        .then(res => dispatch(setBooks(res.data)))\r\n        .catch(err => console.log(err))\r\n}\r\nexport const completeBookRequest = data => dispatch => {\r\n    axios.post('/api/book/complete', data)\r\n        .then(res => {\r\n            dispatch(setBooks(res.data))         \r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\nexport const fetchBooks = () => async dispatch => {\r\n    dispatch(setBooksLoading(true));\r\n    axios.get('/api/books')\r\n        .then(res => {\r\n            dispatch(setBooks(res.data))\r\n            dispatch(setBooksLoading(false));\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n            dispatch(setBooksLoading(false));\r\n        })\r\n\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { completeBookRequest, deleteBookRequest } from './../redux/actions/book';\r\nconst BookItem = ({ book }) => {\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const completeBook = (e) => {\r\n        dispatch(completeBookRequest({\r\n            completed: !book.completed,\r\n            _id: book._id\r\n        }));\r\n    }\r\n    const deleteBook = (e) => {\r\n        dispatch(deleteBookRequest(book._id));\r\n    }\r\n\r\n    return (\r\n        <div className=\"book mb-3\">\r\n            <p className=\"book__author\">{book.author}</p>\r\n            <p className=\"book__title\">{book.title}</p>\r\n            <input type=\"checkbox\" hidden id={book._id} checked={book.completed} onChange={completeBook} className=\"book__completed\"/>\r\n            <label htmlFor={book._id}>{book.completed?'Прочитано':'Не прочитано'}</label>\r\n            <button className=\"book__remove\" onClick={deleteBook}>Удалить</button>\r\n            <Link to={\"/change/\" + book._id} className=\"book__remove\">Изменить</Link>\r\n        </div>\r\n    )\r\n}\r\nexport default BookItem;","import React from 'react';\r\nimport BookItem from './BookItem';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst BookList = () => {\r\n\r\n    const { books } = useSelector(state => state.book);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"w-75 mx-auto\" >\r\n                {books.map((item, index) => <BookItem key={index} book={item} />)}\r\n                {!books.length && <p>Books not found</p>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BookList;","import React from 'react';\r\nimport BookList from '../сomponents/BookList';\r\n\r\nconst BooksPage = () => {\r\n\r\n  return (\r\n      <div className=\"container\">\r\n        <h1 className='mt-3 text-center'>Books</h1>\r\n        <BookList />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default BooksPage;\r\n","import React from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { addBookRequest } from './../redux/actions/book';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst BookAddPage = (props) => {\r\n    const dispatch = useDispatch();\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    \r\n    const onSubmit = data => {\r\n        dispatch(addBookRequest(data));\r\n        props.history.push('/');\r\n    }\r\n  \r\n    return (\r\n        <div className=\"container\">\r\n        <h1 className='mt-3 text-center'>Add Book</h1>\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"w-50 mx-auto\">\r\n            <div className=\"form-group\">\r\n                <label forhtml=\"author\">Author</label>\r\n                <input className=\"form-control\" id=\"author\" name=\"author\" ref={register({ required: true })} />\r\n                {errors.author && <span>This field is required</span>}\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label forhtml=\"title\">Book Title</label>\r\n                <input className=\"form-control\" name=\"title\" id=\"title\" ref={register({ required: true })} />\r\n                {errors.title && <span>This field is required</span>}\r\n            </div>\r\n\r\n            <button className=\"btn btn-success\">Add</button>\r\n        </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BookAddPage;\r\n","import React from 'react';\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"lds-ripple\"><div></div><div></div></div>\r\n    )\r\n}\r\nexport default Loader;","import React from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { changeBookRequest } from '../redux/actions/book';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from './../сomponents/Loader';\r\nconst BookChangePage = (props) => {\r\n    const id = props.match.params.id;\r\n    const { books } = useSelector(state => state.book);\r\n    const book = books.find(item => item._id === id);\r\n\r\n    const dispatch = useDispatch();\r\n    const { register, handleSubmit, errors } = useForm();\r\n    \r\n    const onSubmit = data => {\r\n        const updBook = {\r\n            ...book,\r\n            ...data\r\n        }\r\n        dispatch(changeBookRequest(updBook));\r\n        props.history.push('/');\r\n    }\r\n    \r\n    if(!book) return <Loader />\r\n\r\n    return (\r\n        <div className=\"container\">\r\n        <h1 className='mt-3 text-center'>Add Book</h1>\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"w-50 mx-auto\">\r\n            <div className=\"form-group\">\r\n                <label forhtml=\"author\">Author</label>\r\n                <input className=\"form-control\" defaultValue={book.author} id=\"author\" name=\"author\" ref={register({ required: true })} />\r\n                {errors.author && <span>This field is required</span>}\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label forhtml=\"title\">Book Title</label>\r\n                <input className=\"form-control\" name=\"title\" defaultValue={book.title} id=\"title\" ref={register({ required: true })} />\r\n                {errors.title && <span>This field is required</span>}\r\n            </div>\r\n            <button className=\"btn btn-success\">Save</button>\r\n        </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BookChangePage;\r\n","import React from 'react';\r\nimport { Route, Redirect, Switch} from 'react-router-dom';\r\nimport BooksPage from '../pages/BooksPage';\r\nimport BookAddPage from '../pages/BookAddPage';\r\nimport BookChangePage from '../pages/BookChangePage';\r\n\r\nconst useRoutes = () => {\r\n\r\n        return (\r\n            <Switch>\r\n                <Route exact path=\"/\" component={BooksPage} />\r\n                <Route exact path=\"/add\" component={BookAddPage} />\r\n                <Route exact path=\"/change/:id\" component={BookChangePage} />\r\n                <Redirect to=\"/\" />\r\n            </Switch>\r\n        )\r\n} \r\nexport default useRoutes;","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector  } from 'react-redux';\r\nimport Nav from './сomponents/Nav';\r\nimport useRoutes from './hooks/routes.hook';\r\nimport { fetchBooks } from './redux/actions/book'\r\nimport Loader from './сomponents/Loader';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\n\r\nconst App = () => {\r\n  const routes = useRoutes();\r\n  const { loadings } = useSelector(state => state.book);\r\n\r\n  const dispatch = useDispatch();\r\n  \r\n  useEffect(() => {\r\n    dispatch(fetchBooks());\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Nav />\r\n      {!loadings.books && routes}\r\n      {loadings.books && <Loader />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const inititalState = {\r\n    books:[],\r\n    loadings:{\r\n        books:false\r\n    }\r\n}\r\n  \r\nexport default function book(state = inititalState, action) {\r\n    switch (action.type) {\r\n        case \"SET_BOOKS\":\r\n            return {\r\n                ...state,\r\n                books:[...action.payload],\r\n              };\r\n            break;\r\n        case \"SET_BOOKS_LOADING\":\r\n            state.loadings.books = action.payload;\r\n            return {\r\n                ...state,\r\n              };\r\n            break;\r\n        default:\r\n            return state;\r\n        break;\r\n    }\r\n}\r\n  ","import { combineReducers } from 'redux';\r\nimport book from './book';\r\n\r\nexport default combineReducers({book});\r\n","import { createStore,applyMiddleware } from 'redux';\r\nimport reducer from './reducers/index';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst store = createStore(\r\n  reducer,composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  // eslint-disable-next-line react/jsx-filename-extension\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
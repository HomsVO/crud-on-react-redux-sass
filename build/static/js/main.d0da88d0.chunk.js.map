{"version":3,"sources":["Components/Header/index.jsx","Components/Profile/index.jsx","Components/Main/index.jsx","Components/Login/index.jsx","Components/News/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","className","id","activeClassName","exact","to","React","Component","Profile","Main","Login","News","state","news","isLoaded","error","fetch","then","res","json","result","setState","articles","this","map","item","index","key","style","width","src","urlToImage","alt","title","description","href","url","target","App","isAuth","path","component","localStorage","getItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"qYA4BeA,E,iLAvBX,OACE,gCACE,yBAAKC,UAAU,iDACb,yBAAKA,UAAU,2BAA2BC,GAAG,0BAC3C,wBAAID,UAAU,sBACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAASA,UAAU,WAAWE,gBAAgB,mBAAmBC,OAAK,EAACC,GAAG,KAA1E,SAEF,wBAAIJ,UAAU,YACZ,kBAAC,IAAD,CAASA,UAAU,WAAWE,gBAAgB,mBAAmBC,OAAK,EAACC,GAAG,YAA1E,YAEF,wBAAIJ,UAAU,YACZ,kBAAC,IAAD,CAASA,UAAU,WAAWE,gBAAgB,mBAAmBC,OAAK,EAACC,GAAG,SAA1E,iB,GAdKC,IAAMC,WCOZC,MARf,WACE,OACI,yBAAKP,UAAU,aACb,yC,MCOOQ,MARf,WACE,OACI,yBAAKR,UAAU,aACb,sC,MCKOS,MARf,WACE,OACI,yBAAKT,UAAU,aACb,uCC+COU,E,2MAnDbC,MAAQ,CACNC,KAAK,GACLC,UAAS,EACTC,MAAM,I,mFAEY,IAAD,OAGjBC,MAFU,2FAGTC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZP,UAAU,EACVD,KAAMO,EAAOE,cAGjB,SAACP,GACC,EAAKM,SAAS,CACZP,UAAU,EACVC,e,+BAMN,OACE,yBAAKd,UAAU,aACb,wBAAIA,UAAU,QAAd,QACCsB,KAAKX,MAAME,UACR,yBAAKb,UAAU,4CACdsB,KAAKX,MAAMC,KAAKW,KAAI,SAACC,EAAKC,GACvB,OACE,yBAAKC,IAAKD,EAAOzB,UAAU,YAAY2B,MAAO,CAACC,MAAM,QACnD,yBAAK5B,UAAU,eAAe6B,IAAKL,EAAKM,WAAYC,IAAI,mBACxD,yBAAK/B,UAAU,aACb,wBAAIA,UAAU,cAAcwB,EAAKQ,OACjC,uBAAGhC,UAAU,aAAawB,EAAKS,aAC/B,uBAAGC,KAAMV,EAAKW,IAAKC,OAAO,SAASpC,UAAU,mBAA7C,2B,GAvCHK,IAAMC,WCoCV+B,E,2MAzBb1B,MAAQ,CACN2B,QAAO,G,wEAGP,OACE,yBAAKtC,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,OAAK,EAACoC,KAAK,IAAIC,UAAWhC,IACjC,kBAAC,IAAD,CAAOL,OAAK,EAACoC,KAAK,SAASC,UAAW/B,IACtC,kBAAC,IAAD,CAAON,OAAK,EAACoC,KAAK,WAAWC,UAAYlB,KAAKX,MAAM2B,OAAQ/B,EAAQE,IACpE,kBAAC,IAAD,CAAON,OAAK,EAACoC,KAAK,QAAQC,UAAW9B,Q,0CAO3C,IAAI4B,GACJA,IAAWG,aAAaC,QAAQ,YACrBpB,KAAKF,SAAS,CAACkB,OAAOA,Q,GArBnBjC,IAAMC,WCAJqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAINC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACL4C,QAAQ5C,MAAMA,EAAM6C,c","file":"static/js/main.d0da88d0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass Header extends React.Component {\r\n  render(){\r\n    return (\r\n      <header>\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark  bg-dark \">\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link\" activeClassName=\"nav-link--active\" exact to=\"/\">Main</NavLink>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link\" activeClassName=\"nav-link--active\" exact to=\"/profile\">Profile</NavLink>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link\" activeClassName=\"nav-link--active\" exact to=\"/news\">News</NavLink>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </header>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nfunction Profile() {\r\n  return (\r\n      <div className=\"container\">\r\n        <h1>Profile</h1>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { Route , Router , Switch} from 'react-router-dom';\r\nimport style from './index.module.scss';\r\n\r\nfunction Main() {\r\n  return (\r\n      <div className=\"container\">\r\n        <h1>Main</h1>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Route , Router , Switch} from 'react-router-dom';\r\nimport style from './index.module.scss';\r\n\r\nfunction Login() {\r\n  return (\r\n      <div className=\"container\">\r\n        <h1>Login</h1>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\n\r\nclass News extends React.Component {\r\n  state = {\r\n    news:[],\r\n    isLoaded:false,\r\n    error:''\r\n  }\r\n  componentDidMount(){\r\n    let url = 'https://newsapi.org/v2/top-headlines?country=us&apiKey=ff38cedd9fd84e048e80bd5b1d4610db';\r\n\r\n    fetch(url)\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          news: result.articles\r\n        });\r\n      },\r\n      (error) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          error\r\n        });\r\n      }\r\n    )\r\n  }\r\n  render(){\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className='mt-3'>News</h1>\r\n        {this.state.isLoaded && \r\n            <div className=\"d-flex flex-wrap justify-content-between\">\r\n            {this.state.news.map((item,index)=>{\r\n                return (\r\n                  <div key={index} className=\"card mt-3\" style={{width:\"30%\"}}>\r\n                    <img className=\"card-img-top\" src={item.urlToImage} alt=\"Card image cap\" />\r\n                    <div className=\"card-body\">\r\n                      <h5 className=\"card-title\">{item.title}</h5>\r\n                      <p className=\"card-text\">{item.description}</p>\r\n                      <a href={item.url} target=\"_blank\" className=\"btn btn-primary\">Go somewhere</a>\r\n                    </div>\r\n                  </div>\r\n                )\r\n            })}\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default News;\r\n","import React from 'react';\nimport { Route , Switch} from 'react-router-dom';\nimport './App.scss';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport Header from './Components/Header/index.jsx'\nimport Profile from './Components/Profile/index.jsx'\nimport Main from './Components/Main/index.jsx'\nimport Login from './Components/Login/index.jsx'\nimport News from './Components/News/index.jsx'\n\nclass App extends React.Component {\n  state = {\n    isAuth:false,\n  }\n  render(){\n    return (\n      <div className=\"container\">\n        <Header />\n        <Switch>\n          <Route exact path='/' component={Main}/>\n          <Route exact path='/login' component={Login}/>\n          <Route exact path='/profile' component={(this.state.isAuth)?Profile:Login}/>\n          <Route exact path='/news' component={News}/>\n        </Switch>\n      </div>\n    );\n  }\n\n  componentDidMount(){\n    let isAuth = false;\n    isAuth = !!localStorage.getItem('isAuth');\n    if(isAuth) this.setState({isAuth:isAuth});\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}